{"version":3,"sources":["common.tsx","mobx.ts","AppMobx.tsx","redux.ts","AppRedux.tsx","reportWebVitals.ts","index.tsx"],"names":["fakeTitle","strs","split","Array","fill","map","rand","length","join","max","Math","round","random","CountRender","count","useRef","useEffect","current","className","TodoItem","title","done","id","v4","this","setTitle","setDone","makeAutoObservable","newTitle","store","todos","filter","todo","push","idx","splice","find","addTodo","toggleTodo","toggleDone","findTodo","runningSimulation","toggleSimulatedUpdates","update","action","console","group","forEach","log","updateTodo","removeTodo","groupEnd","setTimeout","Todo","observer","onClick","TodoList","useState","hideDone","setHideDone","pendingTodos","href","type","onChange","e","target","checked","AppMobx","clearAll","todosSlice","createSlice","name","initialState","reducers","state","payload","clearTodos","allTodosSelector","createSelector","todoList","Object","values","incompleteTodosSelector","configureStore","reducer","actions","useSelector","todoSelector","isSimulating","setIsSimulating","allTodos","incompleteTodos","RunningSimulator","dispatch","useDispatch","causeUpdate","setCauseUpdate","timer","clearTimeout","batch","Hydrate","AppRedux","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","style","display","width","padding","borderRight","document","getElementById"],"mappings":"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","file":"static/js/main.956fd88b.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport interface ITodo {\n  id: string;\n  title: string;\n  done: boolean;\n}\n\nexport interface ITodoList {\n  todos: ITodo[];\n}\n\nexport function fakeTitle() {\n  const strs = 'every good boy does fine please excuse my dear aunt susy'.split(' ');\n  return new Array(7)\n    .fill('')\n    .map(() => strs[rand(strs.length)])\n    .join(' ');\n}\n\nexport function rand(max: number) {\n  return Math.round(Math.random() * max);\n}\n\nexport const CountRender: React.FC = () => {\n  const count = useRef(1);\n  useEffect(() => {\n    count.current++;\n  });\n  return <div className=\"count-render\">{count.current}</div>;\n};\n","import { makeAutoObservable, action } from 'mobx';\nimport { v4 } from 'uuid';\nimport { fakeTitle, rand, ITodo, ITodoList } from './common';\n\nexport class TodoItem implements ITodo {\n  constructor(title: string, done = false) {\n    this.setTitle(title);\n    this.setDone(done);\n    makeAutoObservable(this);\n  }\n\n  id = v4();\n\n  title = '';\n\n  done = false;\n\n  toggleDone() {\n    this.setDone(!this.done);\n  }\n\n  setDone(done: boolean) {\n    this.done = done;\n  }\n\n  setTitle(newTitle: string) {\n    this.title = newTitle;\n  }\n}\n\nexport class TodoStore implements ITodoList {\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  todos: TodoItem[] = [];\n\n  get pendingTodos() {\n    return this.todos.filter((todo) => !todo.done);\n  }\n\n  addTodo(todo: TodoItem) {\n    this.todos.push(todo);\n  }\n\n  removeTodo(idx: number) {\n    this.todos.splice(idx, 1);\n  }\n\n  clearAll() {\n    this.todos = [];\n  }\n\n  findTodo(id: string) {\n    return this.todos.find((todo) => todo.id === id);\n  }\n}\n\nexport const store = new TodoStore();\n\nexport function addTodo(title = fakeTitle(), done = false) {\n  store.addTodo(new TodoItem(title, done));\n}\n\nexport function removeTodo(idx: number) {\n  store.removeTodo(idx);\n}\n\nexport function toggleTodo(idx: number | string) {\n  if (typeof idx === 'number') store.todos[idx]?.toggleDone();\n  else store.findTodo(idx)?.toggleDone();\n}\n\nexport function updateTodo(idx: number, title = fakeTitle()) {\n  store.todos[idx]?.setTitle(title);\n}\n\nexport function clearTodos() {\n  store.clearAll();\n  runningSimulation = false;\n}\n\nlet runningSimulation = false;\nexport const toggleSimulatedUpdates = () => {\n  runningSimulation = !runningSimulation;\n  if (runningSimulation) {\n    const update = action(() => {\n      if (!runningSimulation) return;\n\n      console.group('running updates');\n      new Array(25).fill(0).forEach(() => {\n        let idx = -1;\n        switch (rand(4)) {\n          case 0:\n            idx = rand(store.todos.length);\n            console.log('updating title at', idx, '/', store.todos.length);\n            updateTodo(idx, fakeTitle());\n            break;\n          case 1:\n            idx = rand(store.todos.length);\n            console.log('toggling done at', idx, '/', store.todos.length);\n            toggleTodo(idx);\n            break;\n          case 2:\n            if (store.todos.length > 7) {\n              idx = rand(store.todos.length);\n              console.log('removing at', idx, '/', store.todos.length);\n              removeTodo(idx);\n              console.count('change length');\n            }\n            break;\n          case 3:\n            console.log('adding new item');\n            addTodo(fakeTitle(), rand(2) > 1);\n            store.addTodo(new TodoItem(fakeTitle(), rand(2) > 1));\n            console.count('change length');\n            break;\n        }\n      });\n      console.groupEnd();\n\n      setTimeout(update, 50 + rand(150));\n    });\n\n    update();\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { observer } from 'mobx-react-lite';\nimport { addTodo, clearTodos, store, toggleTodo, toggleSimulatedUpdates, TodoStore } from './mobx';\nimport { ITodo, CountRender, fakeTitle, rand } from './common';\n\nconst Todo: React.FC<{ todo: ITodo }> = observer(({ todo }) => {\n  return (\n    <li className={todo.done ? 'completed' : ''} onClick={() => toggleTodo(todo.id)}>\n      {todo.title} <CountRender />\n    </li>\n  );\n});\n\nconst TodoList: React.FC<{ store: TodoStore }> = observer(({ store }) => {\n  const [hideDone, setHideDone] = useState(false);\n\n  const todos = hideDone ? store.pendingTodos : store.todos;\n\n  return (\n    <>\n      <h3>mobx: Re-rendering long lists</h3>\n      <p>mobx allows fine-grain updates, which only re-render the necessary components.</p>\n      <p>\n        <a href=\"https://github.com/schontz/mobx-redux-perf\">GitHub repo</a>\n      </p>\n      <div>\n        Render count: <CountRender />\n        &nbsp; | &nbsp; Total items: {todos.length} / {store.todos.length}\n        &nbsp; | &nbsp;\n        <label>\n          <input type=\"checkbox\" onChange={(e) => setHideDone(e.target.checked)} /> Hide completed?\n        </label>\n        &nbsp; | &nbsp;\n        <button onClick={toggleSimulatedUpdates}>Simulate remote updates</button>\n      </div>\n\n      <ul>\n        {todos.map((todo) => (\n          <Todo todo={todo} key={todo.id} />\n        ))}\n      </ul>\n    </>\n  );\n});\n\nfunction AppMobx() {\n  useEffect(() => {\n    new Array(1000).fill(0).forEach(() => {\n      addTodo(fakeTitle(), rand(2) > 1);\n    });\n    return () => {\n      clearTodos();\n    };\n  }, []);\n\n  return <TodoList store={store} />;\n}\n\nexport default AppMobx;\n","import { configureStore, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport { fakeTitle, ITodo } from './common';\n\ninterface TodosState {\n  todos: Record<string, ITodo>;\n}\n\nconst initialState: TodosState = {\n  todos: {},\n};\n\nexport const todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (\n      state,\n      { payload: { title, done } }: PayloadAction<{ title?: string; done?: boolean }>\n    ) => {\n      const id = v4();\n      state.todos[id] = {\n        id,\n        title: title ?? fakeTitle(),\n        done: done ?? false,\n      };\n    },\n\n    removeTodo: (state, { payload }: PayloadAction<string>) => {\n      delete state.todos[payload];\n    },\n\n    toggleTodo: (state, { payload }: PayloadAction<string>) => {\n      const todo = state.todos[payload];\n      if (todo) todo.done = !todo.done;\n    },\n\n    clearTodos: (state) => {\n      state.todos = {};\n    },\n\n    updateTodo: (\n      state,\n      { payload: { id, title } }: PayloadAction<{ id: string; title: string }>\n    ) => {\n      const todo = state.todos[id];\n      if (todo) todo.title = title;\n    },\n  },\n});\n\nexport const allTodosSelector = createSelector(\n  (state: RootState) => state.todoList,\n  (state) => Object.values(state.todos)\n);\n\nexport const completedTodosSelector = createSelector(allTodosSelector, (todos) => {\n  return todos.filter((todo) => todo.done);\n});\n\nexport const incompleteTodosSelector = createSelector(allTodosSelector, (todos) => {\n  return todos.filter((todo) => !todo.done);\n});\n\nexport const todoSelector = (id: string) => (state: RootState) => state.todoList.todos[id];\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport const store = configureStore({\n  reducer: {\n    todoList: todosSlice.reducer,\n  },\n});\n","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { CountRender, fakeTitle, rand } from './common';\nimport { batch, Provider, useDispatch, useSelector } from 'react-redux';\nimport {\n  incompleteTodosSelector,\n  RootState,\n  store,\n  allTodosSelector,\n  todosSlice,\n  todoSelector,\n} from './redux';\nconst { toggleTodo, addTodo, clearTodos, removeTodo, updateTodo } = todosSlice.actions;\n\nconst Todo: React.FC<{ id: string }> = ({ id }) => {\n  const todo = useSelector(todoSelector(id));\n  return (\n    <li className={todo.done ? 'completed' : ''} onClick={() => toggleTodo(todo.id)}>\n      {todo.title} <CountRender />\n    </li>\n  );\n};\n\nconst TodoList: React.FC = () => {\n  const [hideDone, setHideDone] = useState(false);\n  const [isSimulating, setIsSimulating] = useState(false);\n\n  const allTodos = useSelector(allTodosSelector);\n  const incompleteTodos = useSelector(incompleteTodosSelector);\n\n  const todos = hideDone ? incompleteTodos : allTodos;\n\n  return (\n    <>\n      <h3>Redux: Re-rendering long lists</h3>\n      <p>Redux re-renders the whole list.</p>\n      <p>\n        <a href=\"https://github.com/schontz/mobx-redux-perf\">GitHub repo</a>\n      </p>\n      <div>\n        Render count: <CountRender />\n        &nbsp; | &nbsp; Total items: {todos.length} / {todos.length}\n        &nbsp; | &nbsp;\n        <label>\n          <input type=\"checkbox\" onChange={(e) => setHideDone(e.target.checked)} /> Hide completed?\n        </label>\n        &nbsp; | &nbsp;\n        <button onClick={() => setIsSimulating(!isSimulating)}>Simulate remote updates</button>\n      </div>\n\n      <ul>\n        {todos.map((todo) => (\n          <Todo id={todo.id} key={todo.id} />\n        ))}\n      </ul>\n      {isSimulating && <RunningSimulator />}\n    </>\n  );\n};\n\nconst RunningSimulator: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(allTodosSelector);\n  const [causeUpdate, setCauseUpdate] = useState(false);\n  const timer = useRef<NodeJS.Timer>();\n\n  useEffect(() => {\n    clearTimeout(timer.current!);\n\n    timer.current = setTimeout(\n      () =>\n        batch(() => {\n          console.group('running updates');\n          let length = todos.length;\n          new Array(25).fill(0).forEach(() => {\n            let idx = -1;\n            switch (rand(4)) {\n              case 0:\n                idx = rand(length);\n                console.log('updating title at', idx, '/', todos.length);\n                dispatch(updateTodo({ id: todos[idx].id, title: fakeTitle() }));\n                break;\n              case 1:\n                idx = rand(length);\n                console.log('toggling done at', idx, '/', todos.length);\n                dispatch(toggleTodo(todos[idx].id));\n                break;\n              case 2:\n                if (todos.length > 7) {\n                  idx = rand(length);\n                  console.log('removing at', idx, '/', todos.length);\n                  dispatch(removeTodo(todos[idx].id));\n                  console.count('change length');\n                  length--;\n                }\n                break;\n              case 3:\n                console.log('adding new item');\n                dispatch(addTodo({ title: fakeTitle(), done: rand(2) > 1 }));\n                console.count('change length');\n                length++;\n                break;\n            }\n          });\n          console.groupEnd();\n\n          setCauseUpdate(!causeUpdate); // force a refresh\n        }),\n      50 + rand(150)\n    );\n\n    return () => clearTimeout(timer.current!);\n  }, [dispatch, todos, causeUpdate]);\n\n  return null;\n};\n\nfunction Hydrate() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    batch(() => {\n      new Array(1000).fill(0).forEach(() => {\n        dispatch(addTodo({ title: fakeTitle(), done: rand(2) > 1 }));\n      });\n    });\n    return () => {\n      dispatch(clearTodos());\n    };\n  }, [dispatch]);\n\n  return null;\n}\n\nfunction AppRedux() {\n  return (\n    <Provider store={store}>\n      <Hydrate />\n      <TodoList />\n    </Provider>\n  );\n}\n\nexport default AppRedux;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppMobx from './AppMobx';\nimport AppRedux from './AppRedux';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{ display: 'flex' }}>\n      <div style={{ width: '50%', padding: '10px', borderRight: '1px solid' }}>\n        <AppMobx />\n      </div>\n      <div style={{ width: '50%', padding: '10px' }}>\n        <AppRedux />\n      </div>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}