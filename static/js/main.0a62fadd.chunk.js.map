{"version":3,"sources":["common.tsx","mobx.ts","AppMobx.tsx","redux.ts","AppRedux.tsx","reportWebVitals.ts","index.tsx"],"names":["fakeTitle","strs","split","Array","fill","map","rand","length","join","max","Math","round","random","CountRender","count","useRef","useEffect","current","className","TodoItem","title","done","id","v4","makeAutoObservable","this","setDone","newTitle","store","todos","loading","filter","todo","push","idx","splice","find","clearAll","Promise","resolve","setTimeout","fakeFromServer","console","log","forEach","addTodo","toggleTodo","toggleDone","findTodo","runningSimulation","toggleSimulatedUpdates","update","action","group","setTitle","updateTodo","removeTodo","groupEnd","Todo","observer","onClick","TodoList","useState","hideDone","setHideDone","pendingTodos","href","type","onChange","e","target","checked","loadFromServer","disabled","AppMobx","todosSlice","createSlice","name","initialState","reducers","state","payload","error","clearTodos","todoListSelector","todoList","allTodosSelector","createSelector","Object","values","allTodoIdsSelector","keys","incompleteTodosSelector","incompleteTodoIdsSelector","td","configureStore","reducer","actions","React","memo","useSelector","todoSelector","dispatch","useDispatch","isSimulating","setIsSimulating","allTodos","incompleteTodos","RunningSimulator","causeUpdate","setCauseUpdate","timer","clearTimeout","batch","Hydrate","AppRedux","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","style","display","width","padding","borderRight","document","getElementById"],"mappings":"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","file":"static/js/main.0a62fadd.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport interface ITodo {\n  id: string;\n  title: string;\n  done: boolean;\n}\n\nexport interface ITodoList {\n  todos: ITodo[];\n}\n\nexport function fakeTitle() {\n  const strs = 'every good boy does fine please excuse my dear aunt susy'.split(' ');\n  return new Array(7)\n    .fill('')\n    .map(() => strs[rand(strs.length - 1)])\n    .join(' ');\n}\n\nexport function rand(max: number) {\n  return Math.round(Math.random() * max);\n}\n\nexport const CountRender: React.FC = () => {\n  const count = useRef(1);\n  useEffect(() => {\n    count.current++;\n  });\n  return <div className=\"count-render\">{count.current}</div>;\n};\n","import { makeAutoObservable, action, flow } from 'mobx';\nimport { v4 } from 'uuid';\nimport { fakeTitle, rand, ITodo, ITodoList } from './common';\n\nexport class TodoItem implements ITodo {\n  constructor(public title: string, public done = false, public readonly id = v4()) {\n    makeAutoObservable(this);\n  }\n\n  toggleDone() {\n    this.setDone(!this.done);\n  }\n\n  setDone(done: boolean) {\n    this.done = done;\n  }\n\n  setTitle(newTitle: string) {\n    this.title = newTitle;\n  }\n}\n\nexport class TodoStore implements ITodoList {\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  todos: TodoItem[] = [];\n\n  get pendingTodos() {\n    return this.todos.filter((todo) => !todo.done);\n  }\n\n  addTodo(todo: TodoItem) {\n    this.todos.push(todo);\n  }\n\n  removeTodo(idx: number) {\n    this.todos.splice(idx, 1);\n  }\n\n  clearAll() {\n    this.todos = [];\n  }\n\n  findTodo(id: string) {\n    return this.todos.find((todo) => todo.id === id);\n  }\n\n  loading = false;\n\n  *loadFromServer() {\n    this.loading = true;\n    this.clearAll();\n\n    const fakeFromServer: ITodo[] = yield new Promise<ITodo[]>((resolve) => {\n      setTimeout(() => {\n        resolve(\n          new Array(1000).fill(0).map(() => ({\n            title: fakeTitle(),\n            id: v4(),\n            done: rand(2) > 1,\n          }))\n        );\n      }, rand(1000));\n    });\n\n    console.log('received data from server:', fakeFromServer);\n\n    fakeFromServer.forEach(({ title, done, id }) => {\n      this.addTodo(new TodoItem(title, done, id));\n    });\n\n    this.loading = false;\n  }\n}\n\nexport const store = new TodoStore();\n\nexport function addTodo(title = fakeTitle(), done = false) {\n  store.addTodo(new TodoItem(title, done));\n}\n\nexport function removeTodo(idx: number) {\n  store.removeTodo(idx);\n}\n\nexport function toggleTodo(idx: number | string) {\n  if (typeof idx === 'number') store.todos[idx]?.toggleDone();\n  else store.findTodo(idx)?.toggleDone();\n}\n\nexport function updateTodo(idx: number, title = fakeTitle()) {\n  store.todos[idx]?.setTitle(title);\n}\n\nexport function clearTodos() {\n  store.clearAll();\n  runningSimulation = false;\n}\n\nlet runningSimulation = false;\nexport const toggleSimulatedUpdates = () => {\n  runningSimulation = !runningSimulation;\n  if (runningSimulation) {\n    const update = action(() => {\n      if (!runningSimulation) return;\n\n      console.group('running updates');\n      new Array(25).fill(0).forEach(() => {\n        let idx = -1;\n        switch (rand(4)) {\n          case 0:\n            idx = rand(store.todos.length);\n            console.log('updating title at', idx, '/', store.todos.length);\n            updateTodo(idx, fakeTitle());\n            break;\n          case 1:\n            idx = rand(store.todos.length);\n            console.log('toggling done at', idx, '/', store.todos.length);\n            toggleTodo(idx);\n            break;\n          case 2:\n            if (store.todos.length > 7) {\n              idx = rand(store.todos.length);\n              console.log('removing at', idx, '/', store.todos.length);\n              removeTodo(idx);\n              console.count('change length');\n            }\n            break;\n          case 3:\n            console.log('adding new item');\n            addTodo(fakeTitle(), rand(2) > 1);\n            store.addTodo(new TodoItem(fakeTitle(), rand(2) > 1));\n            console.count('change length');\n            break;\n        }\n      });\n      console.groupEnd();\n\n      setTimeout(update, 50 + rand(150));\n    });\n\n    update();\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { observer } from 'mobx-react-lite';\nimport { addTodo, clearTodos, store, toggleTodo, toggleSimulatedUpdates, TodoStore } from './mobx';\nimport { ITodo, CountRender, fakeTitle, rand } from './common';\n\nconst Todo: React.FC<{ todo: ITodo }> = observer(({ todo }) => {\n  return (\n    <li className={todo.done ? 'completed' : ''} onClick={() => toggleTodo(todo.id)}>\n      {todo.title} <CountRender />\n    </li>\n  );\n});\n\nconst TodoList: React.FC<{ store: TodoStore }> = observer(({ store }) => {\n  const [hideDone, setHideDone] = useState(false);\n\n  const todos = hideDone ? store.pendingTodos : store.todos;\n\n  return (\n    <>\n      <h3>mobx: Re-rendering long lists</h3>\n      <p>mobx allows fine-grain updates, which only re-render the necessary components.</p>\n      <p>\n        Source:{' '}\n        <a href=\"https://github.com/schontz/mobx-redux-perf/blob/master/src/AppMobx.tsx\">\n          AppMobx.tsx\n        </a>\n        | <a href=\"https://github.com/schontz/mobx-redux-perf/blob/master/src/mobx.tsx\">mobx.tsx</a>\n      </p>\n      <div>\n        Render count: <CountRender />\n        &nbsp; | &nbsp; Total items: {todos.length} / {store.todos.length}\n        &nbsp; | &nbsp;\n        <label>\n          <input type=\"checkbox\" onChange={(e) => setHideDone(e.target.checked)} /> Hide completed?\n        </label>\n        &nbsp; | &nbsp; Simulate server:{' '}\n        <button onClick={toggleSimulatedUpdates}>toggle streaming</button>{' '}\n        <button onClick={() => store.loadFromServer()} disabled={store.loading}>\n          one-time\n        </button>\n      </div>\n\n      {store.loading ? (\n        <div>Loading...</div>\n      ) : (\n        <ul>\n          {todos.map((todo) => (\n            <Todo todo={todo} key={todo.id} />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n});\n\nfunction AppMobx() {\n  useEffect(() => {\n    store.loadFromServer();\n  }, []);\n\n  return <TodoList store={store} />;\n}\n\nexport default AppMobx;\n","import { configureStore, createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport { fakeTitle, ITodo } from './common';\n\ninterface TodosState {\n  todos: Record<string, ITodo>;\n}\n\nconst initialState: TodosState = {\n  todos: {},\n};\n\nexport const todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (\n      state,\n      { payload: { title, done } }: PayloadAction<{ title?: string; done?: boolean }>\n    ) => {\n      const id = v4();\n      state.todos[id] = {\n        id,\n        title: title ?? fakeTitle(),\n        done: done ?? false,\n      };\n    },\n\n    removeTodo: (state, { payload }: PayloadAction<string>) => {\n      delete state.todos[payload];\n    },\n\n    toggleTodo: (state, { payload }: PayloadAction<string>) => {\n      const todo = state.todos[payload];\n      if (todo) todo.done = !todo.done;\n      else console.error('toggleTodo: no todo found', payload);\n    },\n\n    clearTodos: (state) => {\n      state.todos = {};\n    },\n\n    updateTodo: (\n      state,\n      { payload: { id, title } }: PayloadAction<{ id: string; title: string }>\n    ) => {\n      const todo = state.todos[id];\n      if (todo) todo.title = title;\n      else console.error('updateTodo: no todo found', id);\n    },\n  },\n});\n\nconst todoListSelector = (state: RootState) => state.todoList;\n\nexport const allTodosSelector = createSelector(todoListSelector, (state) =>\n  Object.values(state.todos)\n);\n\nexport const allTodoIdsSelector = createSelector(todoListSelector, (state) =>\n  Object.keys(state.todos)\n);\n\nexport const completedTodosSelector = createSelector(allTodosSelector, (todos) => {\n  return todos.filter((todo) => todo.done);\n});\n\nexport const incompleteTodosSelector = createSelector(allTodosSelector, (todos) => {\n  return todos.filter((todo) => !todo.done);\n});\n\nexport const incompleteTodoIdsSelector = createSelector(incompleteTodosSelector, (todos) =>\n  todos.map((td) => td.id)\n);\n\nexport const todoSelector = (id: string) => (state: RootState) => state.todoList.todos[id];\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport const store = configureStore({\n  reducer: {\n    todoList: todosSlice.reducer,\n  },\n});\n","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { CountRender, fakeTitle, rand } from './common';\nimport { batch, Provider, useDispatch, useSelector } from 'react-redux';\nimport {\n  store,\n  todosSlice,\n  todoSelector,\n  incompleteTodoIdsSelector,\n  allTodoIdsSelector,\n} from './redux';\nconst { toggleTodo, addTodo, clearTodos, removeTodo, updateTodo } = todosSlice.actions;\n\nconst Todo: React.FC<{ id: string }> = React.memo(({ id }) => {\n  const todo = useSelector(todoSelector(id));\n  const dispatch = useDispatch();\n  return (\n    <li className={todo.done ? 'completed' : ''} onClick={() => dispatch(toggleTodo(todo.id))}>\n      {todo.title} <CountRender />\n    </li>\n  );\n});\n\nconst TodoList: React.FC = () => {\n  const [hideDone, setHideDone] = useState(false);\n  const [isSimulating, setIsSimulating] = useState(false);\n\n  const allTodos = useSelector(allTodoIdsSelector);\n  const incompleteTodos = useSelector(incompleteTodoIdsSelector);\n\n  const todos = hideDone ? incompleteTodos : allTodos;\n\n  return (\n    <>\n      <h3>Redux: Re-rendering long lists</h3>\n      <p>Redux re-renders the whole list.</p>\n      <p>\n        Source:{' '}\n        <a href=\"https://github.com/schontz/mobx-redux-perf/blob/master/src/AppRedux.tsx\">\n          AppRedux.tsx\n        </a>\n        |{' '}\n        <a href=\"https://github.com/schontz/mobx-redux-perf/blob/master/src/redux.tsx\">redux.tsx</a>\n      </p>\n      <div>\n        Render count: <CountRender />\n        &nbsp; | &nbsp; Total items: {todos.length} / {todos.length}\n        &nbsp; | &nbsp;\n        <label>\n          <input type=\"checkbox\" onChange={(e) => setHideDone(e.target.checked)} /> Hide completed?\n        </label>\n        &nbsp; | &nbsp;\n        <button onClick={() => setIsSimulating(!isSimulating)}>Simulate remote updates</button>\n      </div>\n\n      {todos.length ? (\n        <ul>\n          {todos.map((id) => (\n            <Todo id={id} key={id} />\n          ))}\n        </ul>\n      ) : (\n        <div>Loading...</div>\n      )}\n      {isSimulating && <RunningSimulator />}\n    </>\n  );\n};\n\nconst RunningSimulator: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(allTodoIdsSelector);\n  const [causeUpdate, setCauseUpdate] = useState(false);\n  const timer = useRef<NodeJS.Timer>();\n\n  useEffect(() => {\n    clearTimeout(timer.current!);\n\n    timer.current = setTimeout(\n      () =>\n        batch(() => {\n          console.group('running updates');\n          let length = todos.length;\n          new Array(25).fill(0).forEach(() => {\n            let idx = -1;\n            switch (rand(4)) {\n              case 0:\n                idx = rand(length);\n                console.log('updating title at', idx, '/', todos.length);\n                dispatch(updateTodo({ id: todos[idx], title: fakeTitle() }));\n                break;\n              case 1:\n                idx = rand(length);\n                console.log('toggling done at', idx, '/', todos.length);\n                dispatch(toggleTodo(todos[idx]));\n                break;\n              case 2:\n                if (todos.length > 7) {\n                  idx = rand(length);\n                  console.log('removing at', idx, '/', todos.length);\n                  dispatch(removeTodo(todos[idx]));\n                  console.count('change length');\n                  length--;\n                }\n                break;\n              case 3:\n                console.log('adding new item');\n                dispatch(addTodo({ title: fakeTitle(), done: rand(2) > 1 }));\n                console.count('change length');\n                break;\n            }\n          });\n          console.groupEnd();\n\n          setCauseUpdate(!causeUpdate); // force a refresh\n        }),\n      50 + rand(150)\n    );\n\n    return () => clearTimeout(timer.current!);\n  }, [dispatch, todos, causeUpdate]);\n\n  return null;\n};\n\nfunction Hydrate() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      batch(() => {\n        new Array(1000).fill(0).forEach(() => {\n          dispatch(addTodo({ title: fakeTitle(), done: rand(2) > 1 }));\n        });\n      });\n    }, rand(1000));\n\n    return () => {\n      clearTimeout(timer);\n      dispatch(clearTodos());\n    };\n  }, [dispatch]);\n\n  return null;\n}\n\nfunction AppRedux() {\n  return (\n    <Provider store={store}>\n      <Hydrate />\n      <TodoList />\n    </Provider>\n  );\n}\n\nexport default AppRedux;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppMobx from './AppMobx';\nimport AppRedux from './AppRedux';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{ display: 'flex' }}>\n      <div style={{ width: '50%', padding: '10px', borderRight: '1px solid' }}>\n        <AppMobx />\n      </div>\n      <div style={{ width: '50%', padding: '10px' }}>\n        <AppRedux />\n      </div>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}